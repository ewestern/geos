{-# LANGUAGE OverloadedStrings, LambdaCase, ScopedTypeVariables #-}

module Main where
import qualified Data.ByteString as BS
import Test.Hspec
import Control.Exception
import Data.Geometry.Geos.Types
import Data.Geometry.Geos.Serialize
import Data.Geometry.Geos.Raw.Base
import Data.Geometry.Geos.Geometry
import qualified Data.Geometry.Geos.Raw.CoordSeq as RC
import qualified Data.Geometry.Geos.Raw.Geometry as R
import qualified Data.Vector as V
import Debug.Trace

polygonBS = "0103000020E6100000010000000C00000073E92D50491A5DC024275C1ED5DE404076E933474C1A5DC02C279CD7DBDE40406EE9A178431A5DC034271059E6DE40406DE9851C431A5DC034271C7AE6DE40406CE9F7AA421A5DC03427A07DE6DE40406CE92B3B421A5DC03427E05BE6DE40406CE955E4411A5DC03427A023E6DE404066E9E9FB3B1A5DC0282718AAD8DE404062E905D4381A5DC02027E877D1DE40406CE95FF8411A5DC014274C4CC6DE40406CE9B5EC421A5DC01427C8A2C6DE404073E92D50491A5DC024275C1ED5DE4040" :: BS.ByteString

linestringyteString

linestringWkt = "LINESTRING (-117.6602010747678833 34.2193918248615319, -117.6603845546283651 34.2194636577717120, -117.6607240217068835 34.2192029805830202, -117.6611091701577152 34.2190916689088738, -117.6614614615480860 34.2191000508120453, -117.6618031079214433 34.2191286331018887, -117.6622670462620874 34.2191419603279314, -117.6624929385526173 34.2192146314284287, -117.6626075191690006 34.2192490810504921, -117.6627365166588390 34.2192175650945387, -117.6629600620164808 34.2191372664621554, -117.6632140336826353 34.2191098576387844, -117.6637163611398194 34.2189607435813059, -117.6638715101675672 34.2189127990951647, -117.6640004238383739 34.2188898326804747, -117.6640835723178498 34.2188984660407414, -117.6641638709502615 34.2188812831392397, -117.6642813014137232 34.2188267169495646, -117.6644073652374516 34.2188382839759413, -117.6648028234291701 34.2188124677141730, -117.6648773385483935 34.2188382839759413, -117.6649460701544143 34.2189270483305563, -117.6650291348148585 34.2190703788748181, -117.6651151331414269 34.2191649267426214, -117.6652211642165753 34.2192279586544714, -117.6653243454446311 34.2193053236207732, -117.6653672607888836 34.2194056550017649, -117.6653472280403037 34.2195087524108033, -117.6651896482606361 34.2196377499006417, -117.6651552824576186 34.2197265980742884, -117.6651208328355835 34.2198440285377501, -117.6650520174105168 34.2199471259467600, -117.6649432203073360 34.2201391553484768, -117.6649145541984751 34.2201964875661986, -117.6649088545043185 34.2203655505531970, -117.6649202538926318 34.2204285824650469, -117.6651552824576186 34.2209471708144122, -117.6655134411802237 34.2212337480839039, -117.6656108388951054 34.2214142942782757, -117.6657512357732571 34.2216434555110425, -117.6660922115943606 34.2221363952366744, -117.6662183592371207 34.2222480421869477, -117.6663587561152724 34.2223340405134877, -117.6666739156746075 34.2224629541842944, -117.6668888276719684 34.2225489525108628, -117.6671839544827094 34.2227266488581279, -117.6672355031872286 34.2228469291686679, -117.6673014687652028 34.2229243779540013, -117.6673616508299887 34.2229587437570046, -117.6674590485448562 34.2229415608555030, -117.6675421132053145 34.2229128947466563, -117.6676637346203620 34.2229243779540013, -117.6677541753556113 34.2229357773423146, -117.6678554287459377 34.2229422314077567, -117.6680747831519938 34.2229321731239509)" :: BS.ByteString

linestring = LineStringGeometry (LineString $ V.fromList [Coordinate2 (-117.66020107476788) 34.21939182486153,Coordinate2 (-117.66038455462837) 34.21946365777171,Coordinate2 (-117.66072402170688) 34.21920298058302,Coordinate2 (-117.66110917015772) 34.219091668908874,Coordinate2 (-117.66146146154809) 34.219100050812045,Coordinate2 (-117.66180310792144) 34.21912863310189,Coordinate2 (-117.66226704626209) 34.21914196032793,Coordinate2 (-117.66249293855262) 34.21921463142843,Coordinate2 (-117.662607519169) 34.21924908105049,Coordinate2 (-117.66273651665884) 34.21921756509454,Coordinate2 (-117.66296006201648) 34.219137266462155,Coordinate2 (-117.66321403368264) 34.219109857638784,Coordinate2 (-117.66371636113982) 34.218960743581306,Coordinate2 (-117.66387151016757) 34.218912799095165,Coordinate2 (-117.66400042383837) 34.218889832680475,Coordinate2 (-117.66408357231785) 34.21889846604074,Coordinate2 (-117.66416387095026) 34.21888128313924,Coordinate2 (-117.66428130141372) 34.218826716949565,Coordinate2 (-117.66440736523745) 34.21883828397594,Coordinate2 (-117.66480282342917) 34.21881246771417,Coordinate2 (-117.6648773385484) 34.21883828397594,Coordinate2 (-117.66494607015441) 34.218927048330556,Coordinate2 (-117.66502913481486) 34.21907037887482,Coordinate2 (-117.66511513314143) 34.21916492674262,Coordinate2 (-117.66522116421658) 34.21922795865447,Coordinate2 (-117.66532434544463) 34.21930532362077,Coordinate2 (-117.66536726078888) 34.219405655001765,Coordinate2 (-117.6653472280403) 34.2195087524108,Coordinate2 (-117.66518964826064) 34.21963774990064,Coordinate2 (-117.66515528245762) 34.21972659807429,Coordinate2 (-117.66512083283558) 34.21984402853775,Coordinate2 (-117.66505201741052) 34.21994712594676,Coordinate2 (-117.66494322030734) 34.22013915534848,Coordinate2 (-117.66491455419848) 34.2201964875662,Coordinate2 (-117.66490885450432) 34.2203655505532,Coordinate2 (-117.66492025389263) 34.22042858246505,Coordinate2 (-117.66515528245762) 34.22094717081441,Coordinate2 (-117.66551344118022) 34.221233748083904,Coordinate2 (-117.6656108388951) 34.221414294278276,Coordinate2 (-117.66575123577326) 34.22164345551104,Coordinate2 (-117.66609221159436) 34.222136395236674,Coordinate2 (-117.66621835923712) 34.22224804218695,Coordinate2 (-117.66635875611527) 34.22233404051349,Coordinate2 (-117.66667391567461) 34.222462954184294,Coordinate2 (-117.66688882767197) 34.22254895251086,Coordinate2 (-117.66718395448271) 34.22272664885813,Coordinate2 (-117.66723550318723) 34.22284692916867,Coordinate2 (-117.6673014687652) 34.222924377954,Coordinate2 (-117.66736165082999) 34.222958743757005,Coordinate2 (-117.66745904854486) 34.2229415608555,Coordinate2 (-117.66754211320531) 34.222912894746656,Coordinate2 (-117.66766373462036) 34.222924377954,Coordinate2 (-117.66775417535561) 34.222935777342315,Coordinate2 (-117.66785542874594) 34.22294223140776,Coordinate2 (-117.668074783152) 34.22293217312395]) (Just 4326)

point = PointGeometry (Point $ Coordinate2 36.1 (-119.1)) (Just 4326)
makePolygon = Polygon . V.singleton . LinearRing . V.map (uncurry Coordinate2) . V.fromList
polygon1 =  makePolygon [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)]
polygon2 = makePolygon [(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)]


main :: IO ()
main = hspec $ do
  describe "raw geometry" $ do

    it "Creates a Coordinate Sequence" $  do
      let (size, dim) = runGeos $ do 
            cs :: RC.CoordSeq <- RC.createCoordinateSequence 2 2
            size <-  RC.getCoordinateSequenceSize cs 
            dim <-  RC.getCoordinateSequenceDimensions cs
            return (size, dim)
      size `shouldBe` (2 :: Int)
      dim `shouldBe` (2 :: Int)
    it "Sets a Coordinate Sequence" $ do
      let (d1, d2) = runGeos $ do
            c :: RC.CoordSeq <- RC.createCoordinateSequence 2 2
            RC.setCoordinateSequenceX c 0 5.0 
            RC.setCoordinateSequenceY c 0 10.0 
            d1 <- RC.getCoordinateSequenceX c 0
            d2 <- RC.getCoordinateSequenceY c 0
            return (d1, d2)
      d1 `shouldBe` (5.0 :: Double)
      d2 `shouldBe` (10.0 :: Double)
    it "Gets a Coordinate Sequence from a geometry" $ do
      let cs = runGeos $ do
            c <- RC.createCoordinateSequence 2 2
            RC.setCoordinateSequenceX c 0 5.0 
            RC.setCoordinateSequenceY c 0 10.0 
            return c
          cs' = runGeos $ do
            g <- R.createLineString cs
            R.getCoordinateSequence g
      cs `shouldBe` cs'
    it "Creates a LineString " $ do
      let tid = runGeos $ do
            cs :: RC.CoordSeqConst <- RC.createCoordinateSequence 2 2
            ls <- R.createLineString cs
            R.getTypeId ls
      tid `shouldBe` 1
    it "Creates a Geometry" $ do
      pending
    it "Converts a LineString" $ do
      let (srid, tid, tn) = runGeos $ do
            l <- convertGeometryToRaw linestring
            t <- R.getTypeId l
            s <- R.getSRID l
            tn <- R.getTypeName l
            return (s, t, tn)
      tid `shouldBe` 1
      srid `shouldBe` (Just 4326)
      tn `shouldBe` "LineString"
    it "Converts a Polygon" $ do
      pendingWith "This seems to cause an exception in the cleanup?"
      let t = runGeos $ do
            rp <-  convertGeometryToRaw $ PolygonGeometry polygon1 Nothing
            R.getTypeId rp
      t `shouldBe` 3
    it "Tests disjoint" $ do
      pendingWith "This seems to cause an exception in the cleanup?"
      (disjoint (PolygonGeometry polygon1 Nothing) (PolygonGeometry polygon2 Nothing)) `shouldBe` False 
    it "Tests intersects" $ do
      pendingWith "This seems to cause an exception in the cleanup?"
      intersects (PolygonGeometry polygon1 Nothing) (PolygonGeometry polygon2 Nothing) `shouldBe` True

  describe "Tests Serialization" $ do
    it "Parses a bytestring to a linestring" $  do
      let lsg :: Geometry LineString = withSomeGeometry (readHex linestringBS) $ \case
                  ls@(LineStringGeometry _ _) -> ls
                  _ -> error "asda"
      lsg `shouldBe` linestring
    it "Serializes a LineString into a bytestring" $ do
      linestringBS `shouldBe` writeHex linestring
    it "Serializes a LineString to WKT" $ do
      linestringWkt `shouldBe` (writeWkt linestring)
    it "Can parse WKT" $ do
      let lsg :: Geometry LineString = withSomeGeometry (readWkt (Just 4326) linestringWkt) $ \case
                  ls@(LineStringGeometry _ _) -> ls
                  _ -> error "asda"
      lsg `shouldBe` linestring
